#include<stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include<signal.h>
#include <time.h>
#include <sys/shm.h>
#include <sys/wait.h>
  
  int childPIDS[100];
  int numChildren = 0;
  int totalNumChildren = numChildren;
  int randomArray[10];
  

void sig_handler_child(int signum)
{
     printf("Child Received %d\nNow Dying\n", numChildren);
}

void sig_handler_parent(int signum)
{
    printf("Parent Received %d\n", numChildren);
    for(int i = 0; i < numChildren; i++)
    {
        printf("Child PID: %d\n", childPIDS[i]);
        kill(childPIDS[i], SIGUSR1);
    }
    exit(0);
}

void printRandoms(int lower, int upper, int count)
{
    int i;
    for (i = 0; i < count; i++) {
        int num = (rand() %
           (upper - lower + 1)) + lower;
        printf("%d ", num);
    }
}
  
int main()
{
    int lower = 5, upper = 7, count = 1;
    srand(time(0));
    printRandoms(lower, upper, count);
    
    
    key_t key = ftok("shmfile",65); 
    int shmid = shmget(key,4,0666|IPC_CREAT); 

    total_children = (int*) shmat(shmid,(void*)0,0);
    *total_children = 0;
    
    
    signal(SIGINT,sig_handler_parent);

    while(1)
    {
        printf("Parent spawning a child\n");
        int pid = fork();
        if(pid == 0)
        {
            //child
            printf("Child is born\n");
            signal(SIGUSR1,sig_handler_child);
            pause();
        }
        else
        {
            childPIDS[numChildren] = pid;
            numChildren++;
            printRandoms = randomArray[i];
            printf("parent sleeping for 1 second\n");
            sleep(1); 
        }
    }
    return 0;
}
