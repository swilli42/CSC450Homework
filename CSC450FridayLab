#include<stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include<signal.h>
void sig_handler_parent(int signum)
{
  printf("Parent : Received a response signal from child \n");
  
}

void sig_handler_child(int signum)
{
  printf("Child : Received a signal from parent \n");
  sleep(1);
  kill(getppid(),SIGUSR1);
}

int main()
{
    
  int childArray[100];
  int pid = fork();
  /* Child Process */
  if(pid==0)
  {
    signal(SIGUSR1,sig_handler_child); // Register signal handler
    printf("Child: waiting for signal\n");
    pause();
  }
  /* Parent Process */
  else
  {
    signal(SIGUSR1,sig_handler_parent); // Register signal handler
    sleep(2);
    printf("Parent: sending signal to Child\n");
    while(1)
    {
        signal(SIGUSR1,sig_handler_child);
        sleep(1);
        getppid(), SIGUSR1;
        if(!kill(pid, SIGUSR1))
        {
            printf("The Child is Dead\n");
            break;
        }
    }
    childArray[100] = getppid();
    printf("Parent: waiting for response\n");
    kill(pid,SIGUSR1);
    pause();
  }
  return 0;
}
